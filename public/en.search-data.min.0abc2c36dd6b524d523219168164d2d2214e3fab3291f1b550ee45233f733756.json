[{"id":0,"href":"/docs/tutorial/","title":"Learning Outcomes","section":"Docs","content":" Leaning Outcomes # Tutorial Overview # In the rapidly evolving landscape of web development, managing complex applications has become increasingly challenging. As web applications grow in complexity, developers face significant hurdles in file management, performance optimization, and code organization. This comprehensive tutorial is designed to demystify web bundlers and equip you with the essential skills to streamline your web development workflow.\nWhy Web Bundlers Matter # Modern web applications can quickly balloon to contain over 100 individual files, creating a maze of dependencies, performance bottlenecks, and maintenance nightmares. Web bundlers emerge as powerful solutions, transforming the way we develop, optimize, and deploy web applications.\nWhat You\u0026rsquo;ll Discover # By the end of this tutorial, you\u0026rsquo;ll transform from a developer struggling with unoptimized file management to a proficient build tool expert, capable of creating efficient, performant web applications. This tutorial will also leave you with some more resources to help you continue learning and help you delve deeper into web bundlers/ build tools.\nLearning Objectives # Evaluate the historical context and development of web bundlers, analyzing the challenges they address in modern web development.\nFormulate an understanding of the limitations of using separate, unoptimized files in vanilla web applications, (the number of these files may scale over a 100 files in larger projects) and propose bundler solutions.\nConstruct a simple web application using HTML, CSS, and JavaScript, demonstrating the challenges associated with managing multiple files.\nConfigure Webpack and Rollup, applying bundler settings to optimize and transform a basic web application.\nOptimize the application\u0026rsquo;s performance by employing techniques such as minification, tree-shaking, and bundling with Webpack and Rollup.\nCritique the effectiveness of Webpack and Rollup in solving real-world problems, comparing their features and suitability for various project types.\nDevelop a deeper understanding of advanced bundler features by exploring additional reading materials, enabling further independent learning and application.\nPrerequisite Knowledge # This tutorial assumes you have a basic knowledge of the below web tools and technologies\nBasic understanding of HTML, CSS, and JavaScript Familiarity with command-line interfaces Emphasising that you should have built a couple of web applications using HTML, CSS and vanilla JavaScript! "},{"id":1,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":2,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\nExample # {{% columns [ratio=\u0026#34;1:1\u0026#34;] [class=\u0026#34;...\u0026#34;] %}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{% /columns %}} Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nSettings size ratio for columns # {{% columns ratio=\u0026#34;1:2\u0026#34; %}} \u0026lt;!-- begin columns block --\u0026gt; ## x1 Column Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; ## x2 Column Lorem markdownum insigne... {{% /columns %}} x1 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nx2 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":3,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{% details \u0026#34;Title\u0026#34; [open] %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} {{% details title=\u0026#34;Title\u0026#34; open=true %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} Markdown content # Lorem markdownum insigne\u0026hellip;\n"},{"id":4,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{% hint [info|warning|danger] %}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{% /hint %}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n"},{"id":5,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid initialization config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid [class=\u0026#34;...\u0026#34;] \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} "},{"id":6,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample # {{\u0026lt; section [summary] \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nSecond Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":7,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":8,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":9,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{% tabs %}} {{% tab \u0026#34;MacOS\u0026#34; %}} # MacOS Content {{% /tab %}} {{% tab \u0026#34;Linux\u0026#34; %}} # Linux Content {{% /tab %}} {{% tab \u0026#34;Windows\u0026#34; %}} # Windows Content {{% /tab %}} {{% /tabs %}} Example # "},{"id":10,"href":"/docs/tutorial/abc/","title":"History","section":"Learning Outcomes","content":" Leaning Outcomes # Web Bundlers : Optimizing Modern Web Development # Tutorial Overview # In the rapidly evolving landscape of web development, managing complex applications has become increasingly challenging. As web applications grow in complexity, developers face significant hurdles in file management, performance optimization, and code organization. This comprehensive tutorial is designed to demystify web bundlers and equip you with the essential skills to streamline your web development workflow.\nWhy Web Bundlers Matter # Modern web applications can quickly balloon to contain over 100 individual files, creating a maze of dependencies, performance bottlenecks, and maintenance nightmares. Web bundlers emerge as powerful solutions, transforming the way we develop, optimize, and deploy web applications.\nWhat You\u0026rsquo;ll Discover # By the end of this tutorial, you\u0026rsquo;ll transform from a developer struggling with unoptimized file management to a proficient build tool expert, capable of creating efficient, performant web applications. This tutorial will also leave you with some more resources to help you continue learning and help you delve deeper into web bundlers/ build tools.\nLearning Objectives # Evaluate the historical context and development of web bundlers, analyzing the challenges they address in modern web development.\nFormulate an understanding of the limitations of using separate, unoptimized files in vanilla web applications, (the number of these files may scale over a 100 files in larger projects) and propose bundler solutions.\nConstruct a simple web application using HTML, CSS, and JavaScript, demonstrating the challenges associated with managing multiple files.\nConfigure Webpack and Rollup, applying bundler settings to optimize and transform a basic web application.\nOptimize the application\u0026rsquo;s performance by employing techniques such as minification, tree-shaking, and bundling with Webpack and Rollup.\nCritique the effectiveness of Webpack and Rollup in solving real-world problems, comparing their features and suitability for various project types.\nDevelop a deeper understanding of advanced bundler features by exploring additional reading materials, enabling further independent learning and application.\nPrerequisite Knowledge # This tutorial assumes you have a basic knowledge of the below web tools and technologies\nBasic understanding of HTML, CSS, and JavaScript Familiarity with command-line interfaces Emphasising that you should have built a couple of web applications using HTML, CSS and vanilla JavaScript! "},{"id":11,"href":"/introduction/","title":"History","section":"Leaning outcomes","content":" Leaning Outcomes # Web Bundlers : Optimizing Modern Web Development # Tutorial Overview # In the rapidly evolving landscape of web development, managing complex applications has become increasingly challenging. As web applications grow in complexity, developers face significant hurdles in file management, performance optimization, and code organization. This comprehensive tutorial is designed to demystify web bundlers and equip you with the essential skills to streamline your web development workflow.\nWhy Web Bundlers Matter # Modern web applications can quickly balloon to contain over 100 individual files, creating a maze of dependencies, performance bottlenecks, and maintenance nightmares. Web bundlers emerge as powerful solutions, transforming the way we develop, optimize, and deploy web applications.\nWhat You\u0026rsquo;ll Discover # By the end of this tutorial, you\u0026rsquo;ll transform from a developer struggling with unoptimized file management to a proficient build tool expert, capable of creating efficient, performant web applications. This tutorial will also leave you with some more resources to help you continue learning and help you delve deeper into web bundlers/ build tools.\nLearning Objectives # Evaluate the historical context and development of web bundlers, analyzing the challenges they address in modern web development.\nFormulate an understanding of the limitations of using separate, unoptimized files in vanilla web applications, (the number of these files may scale over a 100 files in larger projects) and propose bundler solutions.\nConstruct a simple web application using HTML, CSS, and JavaScript, demonstrating the challenges associated with managing multiple files.\nConfigure Webpack and Rollup, applying bundler settings to optimize and transform a basic web application.\nOptimize the application\u0026rsquo;s performance by employing techniques such as minification, tree-shaking, and bundling with Webpack and Rollup.\nCritique the effectiveness of Webpack and Rollup in solving real-world problems, comparing their features and suitability for various project types.\nDevelop a deeper understanding of advanced bundler features by exploring additional reading materials, enabling further independent learning and application.\nPrerequisite Knowledge # This tutorial assumes you have a basic knowledge of the below web tools and technologies\nBasic understanding of HTML, CSS, and JavaScript Familiarity with command-line interfaces Emphasising that you should have built a couple of web applications using HTML, CSS and vanilla JavaScript! "},{"id":12,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex display=true \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\] Text continues here.\n"}]